一、每种单例写法的优、缺点
1.饿汉式
优点：线程安全。
缺点：可能浪费内存空间，无论会不会用到对象，均会创建

2.懒汉式
优点：节省内存空间
缺点：线程不安全，需要做特殊处理。（比如双检查，静态内部类形式），
处理不好会出现性能问题。（比如同步方法）

3.注册式(IOC)
优点：方便管理对象，也是懒加载。
缺点：同懒汉式。

4.枚举式(特殊的注册式单例)
优点：饿汉式的，线程安全，无法通过反射和反序列化破坏。(从JDK层面就已经规避了风险)
缺点：同饿汉式

5.ThreadLocal
ThreadLocal其实是一种变形的单例，重点并不是只创建一个实例，
而是保证每个线程各自拥有一个实例，互不干扰。


二、破坏单例模式的方式
1.反射
方式：利用反射进行对私有化构造方法的调用，实现实例化多个对象。
预防方法：构造器添加判断，如果已经正常实例化过对象，直接抛出异常。

2.反序列化
方式：通过序列化将已实例化的对象存入硬盘中，并再次反序列化读取，实现多个实例。
预防方法：重写单例类的readResolve方法。
原理：jvm在反序列化出一个新的该类的实例后，会检查该类是否实现了readResolve方法，
如果有，则调用，并用方法返回值覆盖新反序列化出的实例。